train$PMT <- pmt(r=train$V4/1200, n=train$V3, pv=-train$V2, fv=0)
train$PCT <- train$PMT*12/train$V8
train$PCT[881156] <- 0
train$PCT[train$PCT == Inf] <- 10000
test$PMT <- pmt(r=test$V4/1200, n=test$V3, pv=-test$V2, fv=0)
test$PCT <- test$PMT*12/test$V8
#test$V27[48698] <- test$V25[48698]
#test$V25[48698] <- 0
#test$PCT[test$PCT == Inf] <- 10000
train$V11[train$V11 == ""] = 'y'
test$V11[test$V11 == ""] = 'y'
train$V11 <- as.character(train$V11)
test$V11  <- as.character(test$V11)
train$V11 <- as.factor(train$V11)
test$V11  <- as.factor(test$V11)
train$V6 <- as.character(train$V6)
test$V6 <- as.character(test$V6)
train$V6[is.na(train$V6)] = 'sadface'
test$V6[is.na(test$V6)] = 'sadface'
train$V6[train$V6 == ""] = 'noface'
test$V6[test$V6 == ""] = 'noface'
train$V6 <- as.factor(train$V6)
test$V6 <- as.factor(test$V6)
#test$V16[49966] <- 0
test$V16 <- as.numeric(test$V16)
test$V1 <- rep(NA, nrow(test))
combo <- rbind(test,train)
test <- combo[1:102596,]
train <- combo[102597:1118905,]
write.csv(train,file='cindy_training.csv')
write.csv(test,file='cindy_testing.csv')
write.csv(train,file='cindy_train.csv')
write.csv(test,file='cindy_test.csv')
library(stringr)
library(randomForest)
library(FinCal)
train<-read.csv("/Users/cindy/Dropbox/Algorhythm/Dataset/Project_train.csv", header=F, sep=",", quote="\"", na.strings="\\N")
test<-read.csv("/Users/cindy/Dropbox/Algorhythm/Dataset/test1_unlabeled.csv", header=F, sep=",", quote="\"", na.strings="\\N")
test$V27 <- NULL
train<-train[-1:-26,]
names(test) <- names(train)[2:ncol(train)]
train$V10 <- as.character(train$V10)
dt= strptime(train$V10, '%m/%d/%y')
train$wday=dt$wday
train$mday=dt$mday
train$yday=dt$yday
train$year=dt$year + 1900
train$V9 <- NULL
train$V10 <- NULL
train$V13 <- NULL
train$V14 <- NULL
train$V15 <- NULL
test$V10 <- as.character(test$V10)
dt= strptime(test$V10, '%m/%d/%Y')
test$wday=dt$wday
test$mday=dt$mday
test$yday=dt$yday
test$year=dt$year + 1900
test$V9 <- NULL
test$V10 <- NULL
test$V13 <- NULL
test$V14 <- NULL
test$V15 <- NULL
train$PMT <- pmt(r=train$V4/1200, n=train$V3, pv=-train$V2, fv=0)
train$PCT <- train$PMT*12/train$V8
train$PCT[881156] <- 0
train$PCT[train$PCT == Inf] <- 10000
test$PMT <- pmt(r=test$V4/1200, n=test$V3, pv=-test$V2, fv=0)
test$PCT <- test$PMT*12/test$V8
#test$V27[48698] <- test$V25[48698]
#test$V25[48698] <- 0
#test$PCT[test$PCT == Inf] <- 10000
train$V11[train$V11 == ""] = 'y'
test$V11[test$V11 == ""] = 'y'
train$V11 <- as.character(train$V11)
test$V11  <- as.character(test$V11)
train$V11 <- as.factor(train$V11)
test$V11  <- as.factor(test$V11)
train$V6 <- as.character(train$V6)
test$V6 <- as.character(test$V6)
train$V6[is.na(train$V6)] = 'sadface'
test$V6[is.na(test$V6)] = 'sadface'
train$V6[train$V6 == ""] = 'noface'
test$V6[test$V6 == ""] = 'noface'
train$V6 <- as.factor(train$V6)
test$V6 <- as.factor(test$V6)
#test$V16[49966] <- 0
test$V16 <- as.numeric(test$V16)
test$V1 <- rep(NA, nrow(test))
combo <- rbind(test,train)
test <- combo[1:102596,]
train <- combo[102597:1118905,]
write.csv(test,file='cindy_test_1.csv')
test<-read.csv("/Users/cindy/Dropbox/Algorhythm/Dataset/test3_unlabeled.csv", header=F, sep=",", quote="\"", na.strings="\\N")
test$V27 <- NULL
train<-train[-1:-26,]
names(test) <- names(train)[2:ncol(train)]
train$V10 <- as.character(train$V10)
dt= strptime(train$V10, '%m/%d/%y')
train$wday=dt$wday
train$mday=dt$mday
train$yday=dt$yday
train$year=dt$year + 1900
train$V9 <- NULL
train$V10 <- NULL
train$V13 <- NULL
train$V14 <- NULL
train$V15 <- NULL
test$V10 <- as.character(test$V10)
dt= strptime(test$V10, '%m/%d/%Y')
test$wday=dt$wday
test$mday=dt$mday
test$yday=dt$yday
test$year=dt$year + 1900
test$V9 <- NULL
test$V10 <- NULL
test$V13 <- NULL
test$V14 <- NULL
test$V15 <- NULL
train$PMT <- pmt(r=train$V4/1200, n=train$V3, pv=-train$V2, fv=0)
train$PCT <- train$PMT*12/train$V8
train$PCT[881156] <- 0
train$PCT[train$PCT == Inf] <- 10000
test$PMT <- pmt(r=test$V4/1200, n=test$V3, pv=-test$V2, fv=0)
test$PCT <- test$PMT*12/test$V8
#test$V27[48698] <- test$V25[48698]
#test$V25[48698] <- 0
#test$PCT[test$PCT == Inf] <- 10000
train$V11[train$V11 == ""] = 'y'
test$V11[test$V11 == ""] = 'y'
train$V11 <- as.character(train$V11)
test$V11  <- as.character(test$V11)
train$V11 <- as.factor(train$V11)
test$V11  <- as.factor(test$V11)
train$V6 <- as.character(train$V6)
test$V6 <- as.character(test$V6)
train$V6[is.na(train$V6)] = 'sadface'
test$V6[is.na(test$V6)] = 'sadface'
train$V6[train$V6 == ""] = 'noface'
test$V6[test$V6 == ""] = 'noface'
train$V6 <- as.factor(train$V6)
test$V6 <- as.factor(test$V6)
#test$V16[49966] <- 0
test$V16 <- as.numeric(test$V16)
test$V1 <- rep(NA, nrow(test))
combo <- rbind(test,train)
test <- combo[1:102596,]
train <- combo[102597:1118905,]
train<-read.csv("/Users/cindy/Dropbox/Algorhythm/Dataset/Project_train.csv", header=F, sep=",", quote="\"", na.strings="\\N")
test<-read.csv("/Users/cindy/Dropbox/Algorhythm/Dataset/test3_unlabeled.csv", header=F, sep=",", quote="\"", na.strings="\\N")
test$V27 <- NULL
train<-train[-1:-26,]
names(test) <- names(train)[2:ncol(train)]
train$V10 <- as.character(train$V10)
dt= strptime(train$V10, '%m/%d/%y')
train$wday=dt$wday
train$mday=dt$mday
train$yday=dt$yday
train$year=dt$year + 1900
train$V9 <- NULL
train$V10 <- NULL
train$V13 <- NULL
train$V14 <- NULL
train$V15 <- NULL
test$V10 <- as.character(test$V10)
dt= strptime(test$V10, '%m/%d/%Y')
test$wday=dt$wday
test$mday=dt$mday
test$yday=dt$yday
test$year=dt$year + 1900
test$V9 <- NULL
test$V10 <- NULL
test$V13 <- NULL
test$V14 <- NULL
test$V15 <- NULL
train$PMT <- pmt(r=train$V4/1200, n=train$V3, pv=-train$V2, fv=0)
train$PCT <- train$PMT*12/train$V8
train$PCT[881156] <- 0
train$PCT[train$PCT == Inf] <- 10000
test$PMT <- pmt(r=test$V4/1200, n=test$V3, pv=-test$V2, fv=0)
test$PCT <- test$PMT*12/test$V8
#test$V27[48698] <- test$V25[48698]
#test$V25[48698] <- 0
#test$PCT[test$PCT == Inf] <- 10000
train$V11[train$V11 == ""] = 'y'
test$V11[test$V11 == ""] = 'y'
train$V11 <- as.character(train$V11)
test$V11  <- as.character(test$V11)
train$V11 <- as.factor(train$V11)
test$V11  <- as.factor(test$V11)
train$V6 <- as.character(train$V6)
test$V6 <- as.character(test$V6)
train$V6[is.na(train$V6)] = 'sadface'
test$V6[is.na(test$V6)] = 'sadface'
train$V6[train$V6 == ""] = 'noface'
test$V6[test$V6 == ""] = 'noface'
train$V6 <- as.factor(train$V6)
test$V6 <- as.factor(test$V6)
#test$V16[49966] <- 0
test$V16 <- as.numeric(test$V16)
test$V1 <- rep(NA, nrow(test))
combo <- rbind(test,train)
test <- combo[1:102596,]
train <- combo[102597:1118905,]
write.csv(test,file='cindy_test_3.csv')
library(stringr)
library(randomForest)
library(FinCal)
train<-read.csv("/Users/cindy/Dropbox/Algorhythm/Dataset/Project_train.csv", header=F, sep=",", quote="\"", na.strings="\\N")
test<-read.csv("/Users/cindy/Dropbox/Algorhythm/Dataset/test3_unlabeled.csv", header=F, sep=",", quote="\"", na.strings="\\N")
test<-read.csv("/Users/cindy/Dropbox/Algorhythm/Dataset/test2_unlabeled.csv", header=F, sep=",", quote="\"", na.strings="\\N")
test$V27 <- NULL
train<-train[-1:-26,]
names(test) <- names(train)[2:ncol(train)]
train$V10 <- as.character(train$V10)
dt= strptime(train$V10, '%m/%d/%y')
train$wday=dt$wday
train$mday=dt$mday
train$yday=dt$yday
train$year=dt$year + 1900
train$V9 <- NULL
train$V10 <- NULL
train$V13 <- NULL
train$V14 <- NULL
train$V15 <- NULL
test$V10 <- as.character(test$V10)
dt= strptime(test$V10, '%m/%d/%Y')
test$wday=dt$wday
test$mday=dt$mday
test$yday=dt$yday
test$year=dt$year + 1900
test$V9 <- NULL
test$V10 <- NULL
test$V13 <- NULL
test$V14 <- NULL
test$V15 <- NULL
train$PMT <- pmt(r=train$V4/1200, n=train$V3, pv=-train$V2, fv=0)
train$PCT <- train$PMT*12/train$V8
train$PCT[881156] <- 0
train$PCT[train$PCT == Inf] <- 10000
test$PMT <- pmt(r=test$V4/1200, n=test$V3, pv=-test$V2, fv=0)
test$PCT <- test$PMT*12/test$V8
#test$V27[48698] <- test$V25[48698]
#test$V25[48698] <- 0
#test$PCT[test$PCT == Inf] <- 10000
train$V11[train$V11 == ""] = 'y'
test$V11[test$V11 == ""] = 'y'
train$V11 <- as.character(train$V11)
test$V11  <- as.character(test$V11)
train$V11 <- as.factor(train$V11)
test$V11  <- as.factor(test$V11)
train$V6 <- as.character(train$V6)
test$V6 <- as.character(test$V6)
train$V6[is.na(train$V6)] = 'sadface'
test$V6[is.na(test$V6)] = 'sadface'
train$V6[train$V6 == ""] = 'noface'
test$V6[test$V6 == ""] = 'noface'
train$V6 <- as.factor(train$V6)
test$V6 <- as.factor(test$V6)
#test$V16[49966] <- 0
test$V16 <- as.numeric(test$V16)
test$V1 <- rep(NA, nrow(test))
combo <- rbind(test,train)
test <- combo[1:102596,]
train <- combo[102597:1118905,]
splitdf <- function(dataframe, seed=NULL) {
if (!is.null(seed)) set.seed(seed)
index <- 1:nrow(dataframe)
trainindex <- sample(index, trunc(length(index)/2))
trainset <- dataframe[trainindex, ]
testset <- dataframe[-trainindex, ]
list(trainset=trainset,testset=testset)
}
splits <- splitdf(train, seed=808)
training <- splits$trainset
testing <- splits$testset
model <- randomForest(V1 ~., data=training, importance=TRUE, ntree=100, sampsize=5000, nodesize=25)
prediction<-predict(model,test)
hist(prediction, breaks=200, xlim=c(0,1), ylim=c(0,3000))
hist(prediction, breaks=200, xlim=c(0,1), ylim=c(0,3000))
hist(prediction, breaks=200, xlim=c(.4,.8), ylim=c(0,300))
prop.table(table(prediction>.625))
prediction[prediction > .625] <- 1
prediction[prediction <= .625] <- 0
#> > prop.table(table(prediction>.64))
#0         1
#0.8749659 0.1250341
#> prop.table(table(prediction>.625))
#FALSE      TRUE
#0.8728995 0.1271005
prediction_in <- predict(model,testing)
compare_table<-data.frame(actural=testing$V1,predict=prediction)
common_table<-compare_table[with(compare_table,which(compare_table$actural==compare_table$predict)),]
diff_table<-compare_table[with(compare_table,which(compare_table$actural!=compare_table$predict)),]
TP=nrow(common_table[common_table$actural==1,])
TN=nrow(common_table[common_table$actural==0,])
FP=nrow(diff_table[diff_table$actural==1,])
FN=nrow(diff_table[diff_table$actural==0,])
print((0.2*(1-FN/(FN+TP))+0.8*(1-FP/(FP+TN)))*100)
model <- randomForest(as.factor(V1) ~., data=train, importance=TRUE, ntree=1000, sampsize=5000, nodesize=25)
hist(prediction, breaks=200, xlim=c(0,1), ylim=c(0,3000),col="red")
hist(prediction, breaks=200, xlim=c(0,1), ylim=c(0,3000))
hist(prediction, breaks=200, xlim=c(.4,.8), ylim=c(0,300))
prediction<-predict(model,test)
hist(prediction, breaks=200, xlim=c(0,1), ylim=c(0,3000))
hist(prediction, breaks=200, xlim=c(0,1), ylim=c(0,3000),col="red")
hist(prediction, breaks=200, xlim=c(.4,.8), ylim=c(0,300))
hist(prediction, breaks=200, xlim=c(.4,.8), ylim=c(0,300),col="blue")
library(stringr)
library(randomForest)
library(FinCal)
splitdf <- function(dataframe, seed=NULL) {
if (!is.null(seed)) set.seed(seed)
index <- 1:nrow(dataframe)
trainindex <- sample(index, trunc(length(index)/2))
trainset <- dataframe[trainindex, ]
testset <- dataframe[-trainindex, ]
list(trainset=trainset,testset=testset)
}
score <- function(cut, actual, prediction) {
prediction[prediction > cut] <- 1
prediction[prediction <= cut] <- 0
compare_table <- data.frame(actural=actual,predict=prediction)
common_table <- compare_table[with(compare_table,which(compare_table$actural==compare_table$predict)),]
diff_table <- compare_table[with(compare_table,which(compare_table$actural!=compare_table$predict)),]
TP <- nrow(common_table[common_table$actural==1,])
TN <- nrow(common_table[common_table$actural==0,])
FP <- nrow(diff_table[diff_table$actural==1,])
FN <- nrow(diff_table[diff_table$actural==0,])
score <- ((0.2*(1-FN/(FN+TP))+0.8*(1-FP/(FP+TN)))*100)
}
train<-read.csv("project_train.csv", header=F, sep=",", quote="\"", na.strings="\\N")
train<-read.csv("/Users/cindy/Dropbox/Algorhythm/Dataset/project_train.csv", header=F, sep=",", quote="\"", na.strings="\\N")
trest<-read.csv("/Users/cindy/Dropbox/Algorhythm/Dataset/test2_labeled.csv", header=F, sep=",", quote="\"", na.strings="\\N")
test<-read.csv("/Users/cindy/Dropbox/Algorhythm/Dataset/test3_Unlabeled.csv", header=F, sep=",", quote="\"", na.strings="\\N")
trainnames <- names(train)[2:ncol(train)]
train<-train[-1:-26,]
train$V10 <- as.character(train$V10)
dt= strptime(train$V10, '%m/%d/%y')
train$wday=dt$wday
train$mday=dt$mday
train$yday=dt$yday
train$year=dt$year + 1900
train$V9 <- NULL
train$V10 <- NULL
train$V13 <- NULL
train$V14 <- NULL
train$V15 <- NULL
train$PMT <- pmt(r=train$V4/1200, n=train$V3, pv=-train$V2, fv=0)
train$PCT <- train$PMT*12/train$V8
train$PCT[881156] <- 0
train$PCT[train$PCT == Inf] <- 10000
train$V11[train$V11 == ""] = 'y'
train$V11 <- as.character(train$V11)
train$V11 <- as.factor(train$V11)
train$V6 <- as.character(train$V6)
train$V6[is.na(train$V6)] = 'sadface'
train$V6[train$V6 == ""] = 'noface'
train$V6 <- as.factor(train$V6)
trest$V10 <- as.character(trest$V10)
dt= strptime(trest$V10, '%m/%d/%Y')
trest$wday=dt$wday
trest$mday=dt$mday
trest$yday=dt$yday
trest$year=dt$year + 1900
trest$V9 <- NULL
trest$V10 <- NULL
trest$V13 <- NULL
trest$V14 <- NULL
trest$V15 <- NULL
trest$PMT <- pmt(r=trest$V4/1200, n=trest$V3, pv=-trest$V2, fv=0)
trest$PCT <- trest$PMT*12/trest$V8
trest$V11[trest$V11 == ""] = 'y'
trest$V11  <- as.character(trest$V11)
trest$V11  <- as.factor(trest$V11)
trest$V6 <- as.character(trest$V6)
trest$V6[is.na(trest$V6)] = 'sadface'
trest$V6[trest$V6 == ""] = 'noface'
trest$V6 <- as.factor(trest$V6)
names(test) <- trainnames
test$V1 <- rep(NA, nrow(test))
test$V10 <- as.character(test$V10)
dt= strptime(test$V10, '%m/%d/%Y')
test$wday=dt$wday
test$mday=dt$mday
test$yday=dt$yday
test$year=dt$year + 1900
test$V9 <- NULL
test$V10 <- NULL
test$V13 <- NULL
test$V14 <- NULL
test$V15 <- NULL
test$PMT <- pmt(r=test$V4/1200, n=test$V3, pv=-test$V2, fv=0)
test$PCT <- test$PMT*12/test$V8
test$V11[test$V11 == ""] = 'y'
test$V11  <- as.character(test$V11)
test$V11  <- as.factor(test$V11)
test$V6 <- as.character(test$V6)
test$V6[is.na(test$V6)] = 'sadface'
test$V6[test$V6 == ""] = 'noface'
test$V6 <- as.factor(test$V6)
combo <- rbind(test,trest,train)
test <- combo[1:102596,]
trest <- combo[102597:205192,]
train <- combo[205193:1221501,]
set.seed(415)
modelpure <- randomForest(V1 ~., data=train, importance=TRUE, ntree=200, sampsize=5000, nodesize=25)
predictionpure <- predict(modelpure,trest)
#Check accuracy over different cuts
cutspure <- data.frame(cut=seq(.5,.7,by=0.005))
cutspure$acc <- apply(cutspure, 1, score, actual=trest$V1, prediction=predictionpure)
plot(cutspure$cut, cutspure$acc)
plot(cutspure$cut, cutspure$acc,col="red")
splits <- splitdf(trest, seed=808)
training <- splits$trainset
testing <- splits$testset
set.seed(415)
modelmess <- randomForest(V1 ~., data=training, importance=TRUE, ntree=1000, sampsize=5000, nodesize=25)
predictionmess <- predict(modelmess,testing)
#Check accuracy over different cuts
cutsmess <- data.frame(cut=seq(.55,.65,by=0.001))
cutsmess$acc <- apply(cutsmess, 1, score, actual=testing$V1, prediction=predictionmess)
plot(cutsmess$cut, cutsmess$acc,col="blue")
setwd("~/Dropbox/TR-Practicum")
setwd("~/Dropbox/TR-Practicum/deliverables")
setwd("~/Dropbox")
weekly_merge_data <- read.csv("weekly_merged_data_of_DJI&Relative_change.csv", sep = ',', header = TRUE)
daily_merge_data <- read.csv("daily_merged_data_of_DJI&Relative_change.csv", sep = ',', header = TRUE)
weekly_DJI<-read.csv("get_DJI_weekly_data_change.csv", sep = ',', header = TRUE)
daily_DJI<-read.csv("get_DJI_data_ninety_days_change.csv", sep = ',', header = TRUE)
weekly_debt<-read.csv("debt_with_relativechange.csv", sep = ',', header = TRUE)
daily_debt<-read.csv("debt_with_relativechange_daily.csv", sep = ',', header = TRUE)
uk_weekly_merge_data <- read.csv("uk_weekly_merged_data_of_DJI&Relative_change.csv", sep = ',', header = TRUE)
UK_weekly_debt<-read.csv("debt_with_relativechange_uk.csv", sep = ',', header = TRUE)
weekly_merge_data <- read.csv("weekly_merged_data_of_DJI&Relative_change.csv", sep = ',', header = TRUE)
weekly_merge_data <- read.csv("weekly_merged_data_of_DJI&Relative_change.csv", sep = ',', header = TRUE)
setwd("~/Dropbox/TR-Practicum/deliverables/R/data")
weekly_merge_data <- read.csv("weekly_merged_data_of_DJI&Relative_change.csv", sep = ',', header = TRUE)
daily_merge_data <- read.csv("daily_merged_data_of_DJI&Relative_change.csv", sep = ',', header = TRUE)
weekly_DJI<-read.csv("get_DJI_weekly_data_change.csv", sep = ',', header = TRUE)
daily_DJI<-read.csv("get_DJI_data_ninety_days_change.csv", sep = ',', header = TRUE)
weekly_debt<-read.csv("debt_with_relativechange.csv", sep = ',', header = TRUE)
daily_debt<-read.csv("debt_with_relativechange_daily.csv", sep = ',', header = TRUE)
uk_weekly_merge_data <- read.csv("uk_weekly_merged_data_of_DJI&Relative_change.csv", sep = ',', header = TRUE)
UK_weekly_debt<-read.csv("debt_with_relativechange_uk.csv", sep = ',', header = TRUE)
#================================================================================================================================
#correlation between DJI & relative_change (t=1,2,3)
#weekly
#for us
mydata<- data.frame(weekly_merge_data[,c(8,12,13,14)])
mydata<-na.omit(mydata)
as.matrix(cor(mydata))
mydata2<- data.frame(uk_weekly_merge_data[,c(8,12,13,14)])
mydata2<-na.omit(mydata2)
as.matrix(cor(mydata2))
library(tseries)
adf.test(ts(weekly_merge_data$Adj.Close))   #not stationary
head(weekly_merge_data)
adf.test(ts(weekly_merge_data$weekly_returns))   #not stationary
new_weekly_returns<-na.omit(weekly_merge_data$weekly_returns)
adf.test(ts(new_weekly_returns))   #not stationary
Box.test(ts(new_weekly_returns),lag=2,type="Ljung",fitdf=0)  #---white noise
time<-(1:463)
plot(as.Date(weekly_merge_data$weekly_Date),weekly_merge_data$Adj.Close,ylab="Adj.Close_DJI",main="Plot of DJI weekly_return for 2004-2013",col = "red")
#ggplot(weekly_merge_data)+geom_point(aes(x=weekly_Date,y=Adj.Close))
weekly_merge_data<-na.omit(weekly_merge_data)
acf(ts(weekly_merge_data$weekly_returns),main="ACF of DJI weekly_return in US for 2004-2013",col="green",ylim=c(-0.5,1),xlim=c(0,25))
acf(ts(weekly_merge_data$weekly_returns),main="ACF of DJI weekly_return in US for 2004-2013",col="blue",ylim=c(-0.5,1),xlim=c(0,25))
daily_merge_data <- read.csv("daily_merged_data_of_DJI&Relative_change.csv", sep = ',', header = TRUE)
head(daily_merge_data)
acf(ts(daily_merge_data$daily_returns),main="ACF of DJI daily_return in US for 90 days",col="blue",ylim=c(-0.5,1),xlim=c(0,25))
pacf(ts(daily_merge_data$daily_returns),main="ACF of DJI daily_return in US for 90 days",col="blue",ylim=c(-0.5,1),xlim=c(0,25))
acf(ts(daily_merge_data$daily_returns),main="ACF of DJI daily_return in US for 90 days",col="blue",ylim=c(-0.5,1),xlim=c(0,25))
pacf(ts(daily_merge_data$daily_returns),main="ACF of DJI daily_return in US for 90 days",col="red",ylim=c(-0.5,1),xlim=c(0,25))
acf(ts(daily_merge_data$daily_returns),main="ACF of DJI daily_return in US for 90 days",col="blue",ylim=c(-0.5,1),xlim=c(0,25))
pacf(ts(daily_merge_data$daily_returns),main="ACF of DJI daily_return in US for 90 days",col="red",ylim=c(-0.5,1),xlim=c(0,25))
acf(ts(daily_merge_data$daily_returns),main="ACF of DJI daily_return in US for 90 days",col="blue",ylim=c(-0.5,1),xlim=c(0,20))
acf(ts(daily_merge_data$daily_returns),main="ACF of DJI daily_return in US for 90 days",col="blue",ylim=c(-0.5,1),xlim=c(0,18))
pacf(ts(daily_merge_data$daily_returns),main="ACF of DJI daily_return in US for 90 days",col="red",ylim=c(-0.5,1),xlim=c(0,18))
adf.test(ts(daily_merge_data$daily_returns))  # not stationary
pacf(ts(daily_merge_data$daily_returns),main="PACF of DJI daily_return in US for 90 days",col="red",ylim=c(-0.5,1),xlim=c(0,18))
acf(ts(UK_weekly_merge_data$weekly_returns),main="",ylab="",ylim=c(-0.5,1),xlim=c(0,25),col="green")
acf(ts(weekly_merge_data$weekly_returns),main="ACF of DJI weekly_return in US for 2004-2013",col="blue",ylim=c(-0.5,1),xlim=c(0,25))
pacf(ts(weekly_merge_data$weekly_returns),main="PACF of DJI weekly_return in US for 2004-2013",col="red",ylim=c(-0.5,1),xlim=c(0,25))
acf(ts(weekly_debt$relative_changethree),main="ACF of debt relative change with t=3",col="green")
head(weekly_debt$relative_changethree)
new_relative_changethree<-na.omit(weekly_debt$relative_changethree)
acf(ts(new_relative_changethree),main="ACF of debt relative change with t=3",col="green")
acf(ts(new_relative_changethree),main="ACF of debt relative change with t=3",col="blue")
pacf(ts(new_relative_changethree),main="PACF of debt relative change with t=3",col="red")
acf(ts(weekly_debt$relative_changethree),main="",ylab="",ylim=c(-1,1),xlim=c(0,25),col="green")
head(weekly_debt$relative_changethree)
new_daily_relative_changethree<-weekly_debt$relative_changethree
acf(ts(new_daily_relative_changethree),main="",ylab="",ylim=c(-1,1),xlim=c(0,25),col="green")
new_daily_relative_changethree<-na.omit(weekly_debt$relative_changethree)
acf(ts(new_daily_relative_changethree),main="",ylab="",ylim=c(-1,1),xlim=c(0,25),col="green")
acf(ts(daily_DJI$Adj.Close),main="ACF of Adj.Close DJI for 90 days",col="green")
acf(ts(daily_debt$change),main="ACF of debt relative change for 90 days with t=3",col="green")
head(daily_debt$change)
new_daily_debt<-na.omit(daily_debt$change)
acf(ts(new_daily_debt),main="ACF of debt relative change for 90 days with t=3",col="green")
acf(ts(new_daily_debt),main="ACF of debt relative change for 90 days with t=3",col="blue")
pacf(ts(new_daily_debt),main="PACF of debt relative change for 90 days with t=3",col="red")
acf(ts(new_daily_debt),main="ACF of debt relative change for 90 days ",col="blue")
pacf(ts(new_daily_debt),main="PACF of debt relative change for 90 days",col="red")
help(tFinal)
help(tFinal)
help(tFinal)
help(tFinal)
help(tFinal)
help(tFinal)
help(ts)
